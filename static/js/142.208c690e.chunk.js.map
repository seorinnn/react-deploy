{"version":3,"file":"static/js/142.208c690e.chunk.js","mappings":"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","sources":["api/hooks/categories.mock.ts","api/hooks/products.mock.ts","api/hooks/user.mock.ts","api/hooks/wish.mock.ts","mocks/browser.ts"],"sourcesContent":["import { rest } from 'msw';\n\nconst CATEGORIES_RESPONSE_DATA = [\n  {\n    id: 2920,\n    name: '생일',\n    description: '감동을 높여줄 생일 선물 리스트',\n    color: '#5949a3',\n    imageUrl:\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Ft1.daumcdn.net%2Fgift%2Fhome%2Ftheme%2F292020231106_MXMUB.png',\n  },\n  {\n    id: 2930,\n    name: '교환권',\n    description: '놓치면 후회할 교환권 특가',\n    color: '#9290C3',\n    imageUrl:\n      'https://img1.daumcdn.net/thumb/S104x104/?fname=https%3A%2F%2Fst.kakaocdn.net%2Fproduct%2Fgift%2Fproduct%2F20240131153049_5a22b137a8d346e9beb020a7a7f4254a.jpg',\n  },\n];\n\n// 모킹 핸들러 설정\nexport const categoriesMockHandler = [\n  rest.get('https://api.example.com/api/categories', (_, res, ctx) => {\n    return res(ctx.json(CATEGORIES_RESPONSE_DATA));\n  }),\n];\n","import { rest } from 'msw';\n\nconst PRODUCTS_MOCK_DATA = {\n  content: [\n    {\n      id: 3245119,\n      name: '[단독각인] 피렌체 1221 에디션 오드코롱 50ml (13종 택1)',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240215083306_8e1db057580145829542463a84971ae3.png',\n      price: 145000,\n    },\n    {\n      id: 2263833,\n      name: '외식 통합권 10만원권',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20200513102805_4867c1e4a7ae43b5825e9ae14e2830e3.png',\n      price: 100000,\n    },\n    {\n      id: 6502823,\n      name: '[선물포장/미니퍼퓸증정] 디켄터 리드 디퓨저 300ml + 메세지카드',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240215112140_11f857e972bc4de6ac1d2f1af47ce182.jpg',\n      price: 108000,\n    },\n    {\n      id: 1181831,\n      name: '[선물포장] 소바쥬 오 드 뚜왈렛 60ML',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240214150740_ad25267defa64912a7c030a7b57dc090.jpg',\n      price: 122000,\n    },\n    {\n      id: 1379982,\n      name: '[정관장] 홍삼정 에브리타임 리미티드 (10ml x 30포)',\n      imageUrl:\n        'https://st.kakaocdn.net/product/gift/product/20240118135914_a6e1a7442ea04aa49add5e02ed62b4c3.jpg',\n      price: 133000,\n    },\n  ],\n  number: 0,\n  totalElements: 5,\n  size: 10,\n  last: true,\n};\n\n// 상품 데이터를 id로 찾는 함수\nconst findProductById = (id: number) => {\n  return PRODUCTS_MOCK_DATA.content.find((product) => product.id === id);\n};\n\n// 모킹 핸들러 설정\nexport const productsMockHandler = [\n  rest.get('https://api.example.com/api/products', (_, res, ctx) => {\n    return res(ctx.json(PRODUCTS_MOCK_DATA));\n  }),\n  rest.get(\n    'https://api.example.com/api/products/:productId',\n    (req, res, ctx) => {\n      const { productId } = req.params;\n      const product = findProductById(Number(productId));\n\n      if (product) {\n        return res(ctx.json(product));\n      } else {\n        return res(ctx.status(404), ctx.json({ error: 'Product not found' }));\n      }\n    }\n  ),\n  rest.get(\n    'https://api.example.com/api/products/:productId/options',\n    (req, res, ctx) => {\n      return res(\n        ctx.json([\n          {\n            id: 1,\n            name: 'Option A',\n            quantity: 10,\n            productId: req.params.productId,\n          },\n          {\n            id: 2,\n            name: 'Option B',\n            quantity: 20,\n            productId: req.params.productId,\n          },\n        ])\n      );\n    }\n  ),\n];\n","import { rest } from 'msw';\n\ninterface User {\n  email: string;\n  password: string;\n}\n\nconst users: User[] = [];\nconst tokens: { [key: string]: string } = {};\n\nexport const userMockHandlers = [\n  // 회원가입 핸들러\n  rest.post(`/api/members/register`, async (req, res, ctx) => {\n    const { email, password } = await req.json<{ email: string; password: string }>();\n\n    // 이메일과 비밀번호가 'test'인지 확인\n    if (email !== 'test' || password !== 'test') {\n      return res(ctx.status(400), ctx.json({ message: 'Invalid input' }));\n    }\n\n    // 새로운 사용자 추가\n    users.push({ email, password });\n    const token = `token-${Math.random().toString(36).substr(2)}`;\n    tokens[email] = token;\n\n    return res(ctx.status(201), ctx.json({ email, token }));\n  }),\n\n  // 로그인 핸들러\n  rest.post(`/api/members/login`, async (req, res, ctx) => {\n    const { email, password } = await req.json<{ email: string; password: string }>();\n\n    // 사용자 인증 확인\n    const existingUser = users.find((user) => user.email === email && user.password === password);\n    if (existingUser) {\n      const token = tokens[email];\n      return res(ctx.status(200), ctx.json({ email, token }));\n    }\n    return res(ctx.status(403), ctx.json({ message: 'Invalid email or password' }));\n  }),\n];\n","import { rest } from 'msw';\n\nlet wishlist: { id: number; productId: number; name: string }[] = [];\n\nexport const wishMockHandlers = [\n  // 관심 목록 조회 핸들러\n  rest.get('/api/wishes', (req, res, ctx) => {\n    const token = req.headers.get('Authorization')?.split(' ')[1];\n\n    if (!token) {\n      return res(ctx.status(401), ctx.json({ message: 'Unauthorized' }));\n    }\n\n    // 응답 데이터 형식에 맞게 가공\n    return res(ctx.status(200), ctx.json({ content: wishlist }));\n  }),\n\n  // 관심 상품 추가 핸들러\n  rest.post('/api/wishes', async (req, res, ctx) => {\n    const token = req.headers.get('Authorization')?.split(' ')[1];\n    const { productId } = await req.json();\n\n    if (!token) {\n      return res(ctx.status(401), ctx.json({ message: 'Unauthorized' }));\n    }\n\n    // 새로운 상품 추가 로직\n    // TODO : 상품 이미지, 이름 올바르게 가져오도록 하기\n    const newWish = {\n      id: wishlist.length + 1,\n      productId,\n      name: `상품${wishlist.length + 1}`,\n    };\n\n    wishlist.push(newWish);\n\n    return res(ctx.status(201), ctx.json(newWish));\n  }),\n\n  // 관심 상품 삭제 핸들러\n  rest.delete('/api/wishes/:wishId', (req, res, ctx) => {\n    const token = req.headers.get('Authorization')?.split(' ')[1];\n    const wishId = Array.isArray(req.params.wishId) ? req.params.wishId[0] : req.params.wishId;\n\n    if (!token) {\n      return res(ctx.status(401), ctx.json({ message: 'Unauthorized' }));\n    }\n\n    wishlist = wishlist.filter((wish) => wish.id !== parseInt(wishId, 10));\n\n    return res(ctx.status(204)); // No content\n  }),\n];\n","import { setupWorker } from 'msw';\n\nimport { categoriesMockHandler } from '@/api/hooks/categories.mock';\nimport { productsMockHandler } from '@/api/hooks/products.mock';\n\nimport { userMockHandlers } from '../api/hooks/user.mock';\nimport { wishMockHandlers } from '../api/hooks/wish.mock';\n\nexport const worker = setupWorker(\n  ...categoriesMockHandler,\n  ...productsMockHandler,\n  ...userMockHandlers,\n  ...wishMockHandlers,\n);\n"],"names":["CATEGORIES_RESPONSE_DATA","id","name","description","color","imageUrl","categoriesMockHandler","rest","get","_","res","ctx","json","PRODUCTS_MOCK_DATA","content","price","number","totalElements","size","last","productsMockHandler","req","productId","params","product","Number","find","status","error","quantity","users","tokens","userMockHandlers","post","async","email","password","message","push","token","concat","Math","random","toString","substr","user","wishlist","wishMockHandlers","_req$headers$get","headers","split","_req$headers$get2","newWish","length","delete","_req$headers$get3","wishId","Array","isArray","filter","wish","parseInt","worker","setupWorker"],"sourceRoot":""}